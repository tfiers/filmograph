# Based on the default nginx.conf file.
# https://gist.github.com/nishantmodak/d08aae033775cb1a0f8a
#
# An Nginx configuration guide:
# https://www.linode.com/docs/websites/nginx/how-to-configure-nginx
#
# Nginx and Gunicorn:
# https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-apps-using-gunicorn-http-server-behind-nginx

worker_processes 1;
# "Generally set to be equal to the number of CPUs or cores."

events {
	worker_connections 1024;
	# max_clients = worker_processes * worker_connections
}

http {

	include mime.types;

	default_type application/octet-stream;

	# Speed up serving locally stored static files.
	sendfile on;

	# Maybe: compress ('gzip' directives).

	keepalive_timeout 65;

	server {
		listen 80;
		# (Hostname/IP) and port on which Nginx should listen for
		# HTTP connections. Since port 80 is the standard for HTTP,
		# this directive here is not necessary.

		# TODO: define servername.

		# Serve static files.
		# These should be placed on the machine in /www/data/.
		location / {
			root /www/data;
			# Requested resources will be appended to this path.
			# Eg. a request for '/images/hello.png' will make Nginx
			# serve '/www/data/images/hello.png'.

			# First try serving a static file matching the requested
			# path. If such a file is not found, forward the request
			# to the webapp.
			try_files $uri @webapp;
		}

		# Proxy to container named 'web' with exposed port 8000.
		location @webapp {
			proxy_pass http://web:8000;
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		}

		# Redirect server error pages to the static page /50x.html
		# error_page   500 502 503 504  /50x.html;
		# location = /50x.html {
		# 	root   html;
		# }
		# This yields:
		# open() "/etc/nginx/html/50x.html" failed (2: No such file or directory)
	}
}

stream {
	# Proxy TCP traffic to the 'db' container so we can connect to
	# the database from outside.
	server {
		listen 5432;
		proxy_pass db:5432;
	}
}
