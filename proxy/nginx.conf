# Based on the default nginx.conf file.
# https://gist.github.com/nishantmodak/d08aae033775cb1a0f8a
#
# An Nginx configuration guide:
# https://www.linode.com/docs/websites/nginx/how-to-configure-nginx
#
# Nginx and Gunicorn:
# https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-apps-using-gunicorn-http-server-behind-nginx
# http://docs.gunicorn.org/en/latest/deploy.html

# TODO: explicitly write error_log directive.
# also: access_log directive in http block below.

worker_processes auto;
# 'auto' tries to detect the number of available CPU cores.

events {
	worker_connections 1024;
}
# max_clients = worker_processes * worker_connections

http {

	# Include directives that map file name extensions to MIME types
	# of responses.
	include mime.types;
	# Fallback in case the MIME type couldn't be determined above.
	default_type application/octet-stream;

	# Speed up serving locally stored static files.
	sendfile on;

	# Maybe: compress (w/ 'gzip' directives).

	# We could decrease this to 5 seconds eg, as in Gunicorn docs.
	# Nginx default is 75 seconds.
	keepalive_timeout 65s;

	server {
		# (Hostname/IP) and port on which Nginx should listen for
		# HTTP connections. Since port 80 is the standard for HTTP,
		# this directive here is not necessary.
		listen 80;

		# Default is 1m. Gunicorn docs example is 4G.
		client_max_body_size 1m;

		# TODO: define server_names(s).

		# Serve static files.
		# These should be placed on the machine in /www/data/.
		location / {
			# Requested resources will be appended to this path.
			# Eg. a request for '/images/hello.png' will make Nginx
			# serve '/www/data/images/hello.png'.
			root /www/data;

			# First try serving a static file matching the requested
			# path. If such a file is not found, forward the request
			# to the webapp.
			try_files $uri @webapp;
		}

		# Proxy to container named 'web' with exposed port 8000.
		location @webapp {
			proxy_pass http://web:8000;
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			# This might fix possible redirect loops ('$uri/' eg):
			# proxy_redirect off;
		}
	}

	# Proxy HTTP traffic on port 5601 to the 'kibana' container.
	server {
		listen 5601;
		location / {
			proxy_pass http://kibana:5601;
		}
	}
}

stream {
	# Proxy TCP traffic on port 5432 to the 'db' container, so we can
	# connect to the database from outside.
	server {
		listen 5432;
		proxy_pass db:5432;
	}
}
